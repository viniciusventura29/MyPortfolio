---
import NavBar from "../components/NavBar.astro";
import Footer from "../components/Footer.astro";
import ThemeIcon from "../components/ThemeIcon.astro";
import { ViewTransitions } from "astro:transitions";

interface Props {
  frontmatter: {
    author: string;
    date: string;
    title: string;
  };
}

const { frontmatter } = Astro.props as Props;
---

<!doctype html>
<html class="bg-grainy" lang="pt-br">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{frontmatter.title}</title>
  </head>
  <body
    class="dark:scrollbar-thumb-darkBlue scrollbar-thumb-slate-600 dark:scrollbar-track-slate-800 scrollbar-thin scrollbar-thumb-rounded-full scrollbar-track-rounded-full"
  >
    <NavBar />
    <ThemeIcon />
    <div
      class="p-2 px-4 mt-10 text-xs dark:bg-[#262036] bg-gray-200 w-fit rounded"
      id="read"
    >
    </div>
    <h1 class="w-full" transition:name={`title-${frontmatter.title}`}>
      {frontmatter.title}
    </h1>
    <slot />
    <ViewTransitions />
    <Footer />
    <style>
      :root {
        --font-size-base: clamp(1rem, 0.34vw + 0.91rem, 1.19rem);
        --font-size-md: clamp(1rem, 0.34vw + 0.91rem, 1.19rem);
        --font-size-lg: clamp(1.2rem, 0.54vw + 1.11rem, 1.39rem);
        --font-size-xl: clamp(1.6rem, 1.1vw + 1.6rem, 1.9rem);
        --font-size-2xl: clamp(2rem, 1.54vw + 1.41rem, 3.31rem);

        --color-text: hsl(12, 5%, 4%);
        --color-bg: hsl(0, 0%, 99%);
        --color-border: hsl(17, 24%, 90%);
      }

      html {
        font-family: system-ui, sans-serif;
        font-size: var(--font-size-base);
        color: var(--color-text);
        background-color: var(--color-bg);
      }
      .bg-grainy {
        background-image: url(../back-grainy.svg);
        background-size: cover;
      }
    </style>

    <style is:global>
      html.dark {
        background-color: #1a1623;
        color: #eeeeee;
      }

      .dark a {
        color: #eeeeee;
      }
      .dark p {
        color: #eeeeee;
      }

      body {
        margin-left: 30% !important;
        margin-right: 30% !important;
      }

      @media (max-width: 768px) {
        body {
          margin-left: 15% !important;
          margin-right: 15% !important;
        }
      }

      h1 {
        font-size: var(--font-size-2xl) !important;
        color: #00275a;
        font-weight: 600;
      }

      .dark h1 {
        color: #93c5fd;
      }

      h2 {
        font-size: var(--font-size-xl) !important;
        color: #003375;
        font-weight: 500 !important;
        margin-top: 2rem !important;
      }

      nav h2 {
        font-size: 1.5rem !important;
        line-height: 2rem /* 32px */;
      }

      .dark h2 {
        color: #93c5fd;
      }

      h3 {
        font-size: var(--font-size-lg) !important;
        color: rgb(34, 34, 34);
        margin-top: 2rem !important;
      }

      .dark h3 {
        color: #93c5fd;
      }

      h4 {
        font-size: var(--font-size-base) !important;
        margin-top: 1rem !important;
      }

      .dark h4 {
        color: #93c5fd;
      }

      li {
        letter-spacing: 0.05em !important;
        text-align: justify;
        line-height: 1.3rem !important;
        font-size: 0.775rem !important;
        color: #011c40;
        list-style: inside;
      }

      .dark li {
        color: #bfdbfe;
      }

      hr {
        margin-top: 1rem !important;
        border-top-width: 2px;
      }

      blockquote p {
        margin: 0 0 1.2rem 1.1rem !important;
        letter-spacing: 0.05em !important;
        text-align: justify;
        line-height: 1.3rem !important;
        font-size: 0.775rem;
        color: #6a6a6a;
        padding: 2px 20px;
        border-width: 0 0 0 4px;
        border-color: #b6b6b6;
      }

      code {
        font-family:
          Menlo,
          Monaco,
          Lucida Console,
          Liberation Mono,
          DejaVu Sans Mono,
          Bitstream Vera Sans Mono,
          Courier New,
          monospace;
        background: #e1e1e1 !important;
        padding: 4px;
        border-radius: 6px;
        font-size: 0.775rem;
      }

      .dark code {
        background: #2f2b3a;
      }

      p {
        letter-spacing: 0.05em;
        text-align: justify;
        line-height: 1.3rem;
        font-size: 0.875rem;
        color: #011c40;

        margin-top: 1rem !important;
      }

      .dark p {
        color: #eee;
      }

      button {
        display: flex;
        margin-top: 30px !important;
        padding: 10px 10px 10px 10px !important;
        border: solid 1.5px rgb(61, 61, 61);
        border-radius: 5px;
      }

      button:hover {
        background-color: #f0f0f0;
      }

      details {
        background: #e2e2e2;
        padding: 15px 20px;
        cursor: pointer;
        letter-spacing: 0.05em;
        text-align: justify;
        line-height: 1.3rem;
        font-size: 0.875rem;
        color: #011c40;
        font-weight: 400;
        border-radius: 7px;

        margin: 1rem 0 1rem 0 !important;
      }

      details summary {
        font-weight: 600;
      }
    </style>

    <script>
      function countNumberOfReading() {
        let allWords = [];
        let getP = document.getElementsByTagName("p");
        for (var i = 0; i < getP.length; i++) {
          allWords.push(getP[i].innerText);
        }

        let numbersOfWords = allWords.join(",").split(" ").length;

        let minutesOfReading = numbersOfWords / 300 + 1;

        console.log(minutesOfReading.toFixed());

        return minutesOfReading.toFixed();
      }

      countNumberOfReading();

      var text = document.createTextNode(
        countNumberOfReading() + " minutes reading"
      );

      let readElement = document.getElementById("read");

      if (readElement) {
        readElement.appendChild(text);
      }

      document.addEventListener("astro:page-load", () => {
        let readElement = document.getElementById("read");

        if (readElement) {
          readElement.appendChild(text);
        }
      });
    </script>
  </body>
</html>
